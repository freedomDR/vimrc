# logging
# glog = init log
snippet ilog
	import logging
	import sys

	logging.basicConfig(format="%(process)d %(processName)s %(thread)d %(threadName)s %(asctime)s %(levelname)s line %(lineno)s : %(message)s", datefmt="%Y-%m-%d %H:%M:%S", level=logging.INFO, handlers=[logging.FileHandler(f"{sys.argv[0].split('.')[0]}.log"), logging.StreamHandler()])

	logger = logging.getLogger(${0:__name__})

# rich log 
snippet rlog
	import logging
	from rich.logging import RichHandler

	logging.basicConfig(format="%(threadName)s: %(message)s", datefmt="%Y-%m-%d %H:%M:%S", level=logging.INFO, handlers=[RichHandler(omit_repeated_times=False)])

	logger = logging.getLogger(__name__)

# MutilThread
snippet m_thread
	from concurrent.futures import ThreadPoolExecutor, as_completed

	def run(datas, func, pool_size_):
		with ThreadPoolExecutor(max_workers=pool_size_) as pool:
			tasks = {pool.submit(func, data): data for data in datas}
			complete_task = 0
			for task in as_completed(tasks):
				complete_task += 1
				try:
					task.result()
					logger.info("** progress -------- {:^9} - {:^8.2%} --------".format("{}/{}".format(complete_task, len(tasks)), complete_task/len(datas)))
				except Exception as e:
					logger.exception(e)

# MutilProcess
snippet m_process
	from concurrent.futures import ProcessPoolExecutor, as_completed

	def run(datas, func, pool_size_):
		with ProcessPoolExecutor(max_workers=pool_size_) as pool:
			tasks = {pool.submit(func, data): data for data in datas}
			complete_task = 0
			for task in as_completed(tasks):
				complete_task += 1
				try:
					task.result()
					logger.info("** progress -------- {:^9} - {:^8.2%} --------".format("{}/{}".format(complete_task, len(tasks)), complete_task/len(datas)))
				except Exception as e:
					logger.exception(e)
	    
# DB 
snippet DB
	import sqlite3

	class DB:

		def __init__(self, db_type, db_name):
			if(db_type == "sqlite3"):
				self.conn = sqlite3.connect(db_name)

		def select_query(self, sql):
			cur = self.conn.cursor()
			cur.execute(sql)
			return cur.fetchall()

		def insert_query(self, sql):
			cur = self.conn.cursor()
			cur.execute(sql)
			self.conn.commit()

		def create_query(self, sql):
			cur = self.conn.cursor()
			cur.execute(sql)
			self.conn.commit()

		def close(self):
			self.conn.commit()
			self.conn.close()
